import { prisma } from './prisma';
import { getAnalyticsData } from './analytics';
import { generateAnalyticsPDF } from './pdf-generator';

// Timer pour le nettoyage automatique des analytics
let cleanupTimer: NodeJS.Timeout | null = null;
let isCleanupRunning = false; // Flag pour √©viter les nettoyages simultan√©s

/**
 * Nettoie les anciennes donn√©es d'analytics (91+ jours)
 * G√©n√®re un PDF de sauvegarde avant suppression
 */
export async function cleanupOldAnalytics(): Promise<void> {
  // V√©rifier si un nettoyage est d√©j√† en cours
  if (isCleanupRunning) {
    console.log('‚ö†Ô∏è [ANALYTICS CLEANUP] Nettoyage d√©j√† en cours, ignor√©');
    return;
  }
  
  try {
    isCleanupRunning = true;
    console.log('üßπ [ANALYTICS CLEANUP] D√©but du nettoyage des anciennes donn√©es...');
    
    // Calculer la date limite (91 jours)
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 91);
    
    console.log(`üìÖ [ANALYTICS CLEANUP] Suppression des donn√©es ant√©rieures √†: ${cutoffDate.toISOString()}`);
    
    // Supprimer les anciennes donn√©es
    console.log('üóëÔ∏è [ANALYTICS CLEANUP] Suppression des anciennes donn√©es...');
    
    // Supprimer les anciennes PageViews
    const deletedPageViews = await prisma.pageView.deleteMany({
      where: {
        createdAt: {
          lt: cutoffDate
        }
      }
    });
    
    // Supprimer les anciennes ArticleViews
    const deletedArticleViews = await prisma.articleView.deleteMany({
      where: {
        createdAt: {
          lt: cutoffDate
        }
      }
    });
    
    // Supprimer les anciennes UserSessions
    const deletedUserSessions = await prisma.userSession.deleteMany({
      where: {
        createdAt: {
          lt: cutoffDate
        }
      }
    });
    
    console.log(`‚úÖ [ANALYTICS CLEANUP] Nettoyage termin√©:`);
    console.log(`   - PageViews supprim√©es: ${deletedPageViews.count}`);
    console.log(`   - ArticleViews supprim√©es: ${deletedArticleViews.count}`);
    console.log(`   - UserSessions supprim√©es: ${deletedUserSessions.count}`);
    
  } catch (error) {
    console.error('‚ùå [ANALYTICS CLEANUP] Erreur lors du nettoyage:', error);
    throw error;
  } finally {
    // Lib√©rer le flag de nettoyage
    isCleanupRunning = false;
    console.log('üîì [ANALYTICS CLEANUP] Flag de nettoyage lib√©r√©');
  }
}

/**
 * Sauvegarde le PDF des analytics
 * Cr√©e un fichier t√©l√©chargeable dans le dossier public
 */
async function saveAnalyticsPDF(filename: string, pdfBuffer: Buffer): Promise<void> {
  try {
    const fs = await import('fs');
    const path = await import('path');
    
    // Cr√©er le dossier backups s'il n'existe pas
    const backupDir = path.join(process.cwd(), 'public', 'backups');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    // Sauvegarder le PDF dans public/backups/
    const filePath = path.join(backupDir, filename);
    fs.writeFileSync(filePath, pdfBuffer);
    
    console.log(`üíæ [ANALYTICS CLEANUP] PDF sauvegard√©: ${filePath}`);
    console.log(`üì• [ANALYTICS CLEANUP] PDF accessible √†: /backups/${filename}`);
    
  } catch (error) {
    console.error('‚ùå [ANALYTICS CLEANUP] Erreur lors de la sauvegarde du PDF:', error);
  }
}

/**
 * D√©marre le nettoyage automatique des analytics
 * Nettoie tous les 91 jours
 */
export function startAnalyticsCleanup(): void {
  // Ne pas nettoyer imm√©diatement au d√©marrage pour √©viter les boucles
  // Attendre que l'application soit compl√®tement initialis√©e
  
  // Programmer le nettoyage tous les 91 jours
  const NINETY_ONE_DAYS = 91 * 24 * 60 * 60 * 1000;
  
  // D√©marrer le premier nettoyage dans 1 heure pour √©viter les conflits au d√©marrage
  setTimeout(() => {
    console.log('‚è∞ [ANALYTICS CLEANUP] Premier nettoyage automatique apr√®s d√©marrage');
    cleanupOldAnalytics().catch(console.error);
  }, 60 * 60 * 1000); // 1 heure
  
  cleanupTimer = setInterval(() => {
    console.log('‚è∞ [ANALYTICS CLEANUP] D√©clenchement du nettoyage automatique');
    cleanupOldAnalytics().catch(console.error);
  }, NINETY_ONE_DAYS);
  
  console.log('‚è∞ [ANALYTICS CLEANUP] Nettoyage automatique programm√© tous les 91 jours (premier dans 1h)');
}

/**
 * Arr√™te le nettoyage automatique des analytics
 */
export function stopAnalyticsCleanup(): void {
  if (cleanupTimer) {
    clearInterval(cleanupTimer);
    cleanupTimer = null;
    console.log('‚ùå [ANALYTICS CLEANUP] Nettoyage automatique arr√™t√©');
  }
}

/**
 * Nettoie manuellement les anciennes donn√©es
 */
export async function manualAnalyticsCleanup(): Promise<void> {
  console.log('üßπ [ANALYTICS CLEANUP] Nettoyage manuel d√©clench√©');
  await cleanupOldAnalytics();
}

/**
 * Nettoie MANUELLEMENT TOUTES les donn√©es d'analytics (nettoyage complet)
 * G√©n√®re un PDF de sauvegarde avant suppression
 */
export async function cleanupAllAnalytics(): Promise<void> {
  try {
    console.log('üßπ [ANALYTICS CLEANUP] D√©but du nettoyage COMPLET des analytics...');
    
    // √âTAPE 1: G√©n√©rer un PDF de sauvegarde AVANT suppression
    console.log('üìä [ANALYTICS CLEANUP] G√©n√©ration du PDF de sauvegarde...');
    const analyticsData = await getAnalyticsData(365); // R√©cup√©rer le maximum de donn√©es
    
    if (analyticsData.pageViews > 0) {
      const pdfBuffer = await generateAnalyticsPDF(analyticsData, 'Sauvegarde compl√®te avant nettoyage total');
      
      // Sauvegarder le PDF
      const filename = `analytics-backup-${new Date().toISOString().split('T')[0]}.pdf`;
      console.log(`üíæ [ANALYTICS CLEANUP] PDF g√©n√©r√©: ${filename}`);
      
      await saveAnalyticsPDF(filename, pdfBuffer);
    }
    
    // √âTAPE 2: Supprimer TOUTES les PageViews APR√àS g√©n√©ration du PDF
    console.log('üóëÔ∏è [ANALYTICS CLEANUP] Suppression de TOUTES les PageViews...');
    const deletedPageViews = await prisma.pageView.deleteMany({});
    
    console.log(`‚úÖ [ANALYTICS CLEANUP] Nettoyage COMPLET termin√©:`);
    console.log(`   - PageViews supprim√©es: ${deletedPageViews.count}`);
    
  } catch (error) {
    console.error('‚ùå [ANALYTICS CLEANUP] Erreur lors du nettoyage complet:', error);
    throw error;
  }
}

/**
 * Initialise le syst√®me de nettoyage automatique
 * √Ä appeler au d√©marrage de l'application
 */
export function initializeAnalyticsCleanup(): void {
  // D√âSACTIV√â TEMPORAIREMENT pour √©viter la boucle infinie
  // startAnalyticsCleanup();
  
  console.log('üöÄ [ANALYTICS CLEANUP] Syst√®me de nettoyage initialis√© (automatique d√©sactiv√©)');
}

/**
 * Nettoie les donn√©es au d√©marrage et programme le nettoyage automatique
 * Cette fonction est appel√©e automatiquement lors de l'import du module
 */
if (typeof window === 'undefined') {
  // C√¥t√© serveur uniquement
  initializeAnalyticsCleanup();
} 