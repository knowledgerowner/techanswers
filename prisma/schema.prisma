// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  contactId String   @db.ObjectId
  contact   Contact  @relation(fields: [contactId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  isSuperAdmin Boolean  @default(false)
  hasPurchased String[] @db.ObjectId // IDs des articles achetés
  
  // Nouvelles propriétés pour les fonctionnalités avancées
  firstName   String?
  lastName    String?
  bio         String?
  avatarUrl   String?
  website     String?
  location    String?
  company     String?  
  jobTitle    String?
  
  // Sécurité et vérification
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  twoFactorBackupCodes String[] // Codes de secours
  lastLoginAt DateTime?
  loginAttempts Int @default(0)
  lockedUntil DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contacts    Contact[]
  replies     Reply[]
  articles    Article[]
  comments    Comment[]
  ratings     Rating[]
  pageViews   PageView[]
  articleViews ArticleView[]
  userSessions UserSession[]
  payments    Payment[]
  notifications Notification[]
  categorySubscriptions CategorySubscription[]
  userPreferences UserPreferences?
  notificationSettings NotificationSettings?
  
  // Nouvelles relations pour la sécurité et la facturation
  twoFactorCodes TwoFactorCode[]
  twoFactorSessions TwoFactorSession[]
  invoices Invoice[]
  purchaseHistory PurchaseHistory[]
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}



model BruteforceAttempt {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ip            String
  userAgent     String
  fingerprint   String   // Hash unique basé sur plusieurs paramètres
  sessionId     String?
  attempts      Int      @default(0)
  lastAttempt   DateTime @default(now())
  blockedUntil  DateTime?
  isBlocked     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Informations détaillées sur l'utilisateur
  headers       Json     // Tous les headers HTTP
  browser       String?
  os            String?
  device        String?
  language      String?
  timezone      String?
  screenSize    String?
  colorDepth    Int?
  pixelRatio    Float?
  canvasFingerprint String?
  webglFingerprint String?
  
  @@index([ip])
  @@index([fingerprint])
  @@index([sessionId])
  @@index([isBlocked])
}

model Article {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  slug          String   @unique
  imageUrl      String?
  excerpt       String?
  isPublished   Boolean  @default(false)
  isMarketing   Boolean  @default(false)
  isPremium     Boolean  @default(false)
  isBilled      Boolean  @default(false)
  premiumPrice  Float?   @default(0)
  billedPrice   Float?   @default(0)

  // Métadonnées SEO personnalisées
  seoTitle     String?
  seoDesc      String?
  seoKeywords  String?
  seoImg       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  ratings     Rating[]
  articleViews ArticleView[]
  payments    Payment[]
  
  // Catégories référencées (liste d'ObjectId vers Category)
  categoryIds String[] @db.ObjectId
  
  // Pour récupérer spécifiquement les articles générés automatiquement
  isAuto      Boolean  @default(false)
  
  // Nouvelles relations
  invoiceItems InvoiceItem[]
  purchaseHistory PurchaseHistory[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  authorName  String
  authorEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Utilisateur authentifié optionnel (sinon on se base sur authorName/email)
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
}

model Rating {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  authorName  String
  authorEmail String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  articleId   String    @db.ObjectId
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Utilisateur authentifié optionnel (sinon on se base sur authorName/email)
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  
  // Métadonnées SEO personnalisées
  seoTitle     String?
  seoDesc      String?
  seoKeywords  String?
  seoImg       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subscriptions CategorySubscription[]
}


model SiteAnalytics {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  date                          DateTime @default(now())
  pageViews                     Int      @default(0)
  uniqueVisitors                Int      @default(0)
  sessions                      Int      @default(0)
  avgSessionDurationSeconds     Int      @default(0)
  bounceRate                    Float?
  sourceBreakdown               Json?
  deviceBreakdown               Json?

  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  @@index([date])
}

model Newsletter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  source      String?  // "footer", "popup", "admin", etc.
  tags        String[] // Pour segmenter les abonnés
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}

model PageView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  page        String   // URL de la page
  title       String?  // Titre de la page
  sessionId   String   // Identifiant de session
  userId      String?  @db.ObjectId // Utilisateur connecté (optionnel)
  user        User?    @relation(fields: [userId], references: [id])
  
  // Informations sur le visiteur
  ip          String?
  userAgent   String?
  referrer    String?
  country     String?
  city        String?
  
  // Informations sur l'appareil
  device      String?
  browser     String?
  os          String?
  
  // Métriques
  timeOnPage  Int?     // Temps passé sur la page en secondes
  scrollDepth Int?     // Pourcentage de scroll (0-100)
  
  // Paiements associés (si applicable)
  stripeSessionId String?
  amount      Float?
  currency    String?
  
  createdAt   DateTime @default(now())

  @@index([page])
  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

// Nouveau modèle pour les vues d'articles spécifiques
model ArticleView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Informations sur la vue
  sessionId   String   // Identifiant de session
  userId      String?  @db.ObjectId // Utilisateur connecté (optionnel)
  user        User?    @relation(fields: [userId], references: [id])
  
  // Informations sur le visiteur
  ip          String?
  userAgent   String?
  referrer    String?
  
  // Métriques spécifiques aux articles
  timeOnPage  Int?     // Temps passé sur l'article en secondes
  scrollDepth Int?     // Pourcentage de scroll (0-100)
  readProgress Int?    // Pourcentage de lecture estimé (0-100)
  
  createdAt   DateTime @default(now())

  @@index([articleId])
  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

// Nouveau modèle pour les sessions utilisateur
model UserSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String   @unique
  userId      String?  @db.ObjectId // Utilisateur connecté (optionnel)
  user        User?    @relation(fields: [userId], references: [id])
  
  // Informations sur la session
  ip          String?
  userAgent   String?
  referrer    String?
  country     String?
  city        String?
  
  // Métriques de session
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // Durée en secondes
  pageViews   Int      @default(0)
  
  // Informations sur l'appareil
  device      String?
  browser     String?
  os          String?
  screenSize  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([startTime])
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId String   @unique
  stripePaymentIntentId String?
  
  // Informations client
  customerEmail   String
  customerName    String?
  userId          String?  @db.ObjectId
  user            User?    @relation(fields: [userId], references: [id])
  
  // Détails du paiement
  amount          Float
  currency        String   @default("eur")
  status          PaymentStatus
  description     String?
  
  // Article acheté
  articleId       String?  @db.ObjectId
  article         Article? @relation(fields: [articleId], references: [id])
  
  // Métadonnées
  metadata        Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Nouvelles relations
  purchaseHistory PurchaseHistory[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([articleId])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

// Nouveau modèle pour les notifications
model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Contenu de la notification
  type        NotificationType
  title       String
  message     String
  data        Json?    // Données supplémentaires (URLs, IDs, etc.)
  
  // État de la notification
  isRead      Boolean  @default(false)
  isArchived  Boolean  @default(false)
  
  // Métadonnées
  priority    NotificationPriority @default(NORMAL)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// Nouveau modèle pour les préférences utilisateur
model UserPreferences {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Préférences d'affichage
  theme       String   @default("dark") // "light", "dark", "auto"
  language    String   @default("fr")   // "fr", "en", "es"
  timezone    String   @default("Europe/Paris")
  
  // Préférences de contenu
  showPremiumContent Boolean @default(true)
  autoPlayVideos    Boolean @default(false)
  showComments      Boolean @default(true)
  showRatings       Boolean @default(true)
  
  // Préférences de navigation
  compactMode       Boolean @default(false)
  showSidebar       Boolean @default(true)
  showBreadcrumbs   Boolean @default(true)
  
  // Préférences de recherche
  searchHistory     Boolean @default(true)
  searchSuggestions Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Nouveau modèle pour les paramètres de notifications
model NotificationSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notifications par email
  emailNotifications EmailNotificationSettings?
  
  // Notifications push (si implémenté plus tard)
  pushNotifications Boolean @default(false)
  
  // Notifications in-app
  inAppNotifications Boolean @default(true)
  
  // Notifications par type
  newArticles       Boolean @default(true)
  commentReplies    Boolean @default(true)
  securityAlerts    Boolean @default(true)
  newsletter        Boolean @default(true)
  marketing         Boolean @default(false)
  
  // Fréquence des notifications
  frequency         NotificationFrequency @default(IMMEDIATE)
  
  // Heures de réception (pour les notifications différées)
  quietHoursStart   String?  // Format "HH:MM"
  quietHoursEnd     String?  // Format "HH:MM"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Nouveau modèle pour les paramètres de notifications par email
model EmailNotificationSettings {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  notificationSettingsId String @unique @db.ObjectId
  notificationSettings NotificationSettings @relation(fields: [notificationSettingsId], references: [id], onDelete: Cascade)
  
  // Types d'emails
  welcome           Boolean @default(true)
  articlePublished  Boolean @default(true)
  commentReply      Boolean @default(true)
  securityAlert     Boolean @default(true)
  newsletter        Boolean @default(true)
  custom            Boolean @default(false)
  
  // Paramètres d'email
  htmlEmails        Boolean @default(true)
  plainTextEmails   Boolean @default(false)
  emailSignature    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Nouveau modèle pour les abonnements aux catégories
model CategorySubscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Type d'abonnement
  type        SubscriptionType @default(ALL_ARTICLES)
  
  // Paramètres de notification
  notifyOnPublish Boolean @default(true)
  notifyOnUpdate  Boolean @default(false)
  notifyOnComment Boolean @default(false)
  
  // Fréquence
  frequency   NotificationFrequency @default(IMMEDIATE)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

// Nouveau modèle pour les codes 2FA
model TwoFactorCode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Code 2FA
  code        String   // Code à 6 chiffres
  type        TwoFactorType
  
  // Sécurité
  used        Boolean  @default(false)
  attempts    Int      @default(0)
  expiresAt   DateTime
  
  // Métadonnées
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([code])
  @@index([expiresAt])
  @@index([used])
}

// Nouveau modèle pour les sessions 2FA
model TwoFactorSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session
  sessionId   String   @unique
  isActive    Boolean  @default(true)
  
  // Métadonnées
  ip          String?
  userAgent   String?
  deviceName  String?
  lastUsed    DateTime @default(now())
  
  // Expiration
  expiresAt   DateTime
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

// Nouveau modèle pour les factures
model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  
  // Informations de facturation
  invoiceNumber String @unique
  stripeInvoiceId String?
  
  // Détails
  amount      Float
  currency    String   @default("eur")
  taxAmount   Float    @default(0)
  totalAmount Float
  
  // Statut
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime?
  paidAt      DateTime?
  
  // Articles facturés
  items       InvoiceItem[]
  
  // Métadonnées
  notes       String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Nouveau modèle pour les éléments de facture
model InvoiceItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String   @db.ObjectId
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  // Article
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id])
  
  // Détails
  description String
  quantity    Int      @default(1)
  unitPrice   Float
  totalPrice  Float
  
  createdAt   DateTime @default(now())
}

// Nouveau modèle pour l'historique des achats
model PurchaseHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  
  // Article acheté
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id])
  
  // Paiement
  paymentId   String   @db.ObjectId
  payment     Payment  @relation(fields: [paymentId], references: [id])
  
  // Métadonnées
  purchaseDate DateTime @default(now())
  price       Float
  currency    String   @default("eur")
  
  // Accès
  accessExpiresAt DateTime? // Si l'accès est limité dans le temps
  
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([articleId])
  @@index([purchaseDate])
}

// Énumérations
enum NotificationType {
  SUCCESS
  ERROR
  WARNING
  INFO
  ARTICLE_PUBLISHED
  COMMENT_REPLY
  SECURITY_ALERT
  NEWSLETTER
  CUSTOM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
  NEVER
}

enum SubscriptionType {
  ALL_ARTICLES
  FEATURED_ONLY
  PREMIUM_ONLY
  CUSTOM
}

enum TwoFactorType {
  LOGIN
  SETUP
  RESET
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}