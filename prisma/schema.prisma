// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  contactId String   @db.ObjectId
  contact   Contact  @relation(fields: [contactId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contacts    Contact[]
  replies     Reply[]
  articles    Article[]
  comments    Comment[]
  ratings     Rating[]
  pageViews   PageView[]
  payments    Payment[]
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}



model BruteforceAttempt {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ip            String
  userAgent     String
  fingerprint   String   // Hash unique basé sur plusieurs paramètres
  sessionId     String?
  attempts      Int      @default(0)
  lastAttempt   DateTime @default(now())
  blockedUntil  DateTime?
  isBlocked     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Informations détaillées sur l'utilisateur
  headers       Json     // Tous les headers HTTP
  browser       String?
  os            String?
  device        String?
  language      String?
  timezone      String?
  screenSize    String?
  colorDepth    Int?
  pixelRatio    Float?
  canvasFingerprint String?
  webglFingerprint String?
  
  @@index([ip])
  @@index([fingerprint])
  @@index([sessionId])
  @@index([isBlocked])
}

model Article {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  slug          String   @unique
  imageUrl      String?
  excerpt       String?
  isPublished   Boolean  @default(false)
  isMarketing   Boolean  @default(false)

  // Métadonnées SEO personnalisées
  seoTitle     String?
  seoDesc      String?
  seoKeywords  String?
  seoImg       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  ratings     Rating[]
  
  // Catégories référencées (liste d'ObjectId vers Category)
  categoryIds String[] @db.ObjectId
  
  // Pour récupérer spécifiquement les articles générés automatiquement
  isAuto      Boolean  @default(false)
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  authorName  String
  authorEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articleId   String   @db.ObjectId
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Utilisateur authentifié optionnel (sinon on se base sur authorName/email)
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
}

model Rating {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  authorName  String
  authorEmail String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  articleId   String    @db.ObjectId
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Utilisateur authentifié optionnel (sinon on se base sur authorName/email)
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model SiteAnalytics {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  date                          DateTime @default(now())
  pageViews                     Int      @default(0)
  uniqueVisitors                Int      @default(0)
  sessions                      Int      @default(0)
  avgSessionDurationSeconds     Int      @default(0)
  bounceRate                    Float?
  sourceBreakdown               Json?
  deviceBreakdown               Json?

  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  @@index([date])
}

model Newsletter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  source      String?  // "footer", "popup", "admin", etc.
  tags        String[] // Pour segmenter les abonnés
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
  @@index([isActive])
}

model PageView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  page        String   // URL de la page
  title       String?  // Titre de la page
  sessionId   String   // Identifiant de session
  userId      String?  @db.ObjectId // Utilisateur connecté (optionnel)
  user        User?    @relation(fields: [userId], references: [id])
  
  // Informations sur le visiteur
  ip          String?
  userAgent   String?
  referrer    String?
  country     String?
  city        String?
  
  // Métriques
  timeOnPage  Int?     // Temps passé sur la page en secondes
  scrollDepth Int?     // Pourcentage de scroll (0-100)
  
  // Paiements associés (si applicable)
  stripeSessionId String?
  amount      Float?
  currency    String?
  
  createdAt   DateTime @default(now())

  @@index([page])
  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId String   @unique
  stripePaymentIntentId String?
  
  // Informations client
  customerEmail   String
  customerName    String?
  userId          String?  @db.ObjectId
  user            User?    @relation(fields: [userId], references: [id])
  
  // Détails du paiement
  amount          Float
  currency        String   @default("eur")
  status          PaymentStatus
  description     String?
  
  // Métadonnées
  metadata        Json?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([stripeSessionId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}