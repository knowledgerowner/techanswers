import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAdminAsync } from '@/lib/auth';

// Fonction pour v√©rifier si l'utilisateur est super admin
async function requireSuperAdminAuth(request: NextRequest) {
  try {
    const admin = await requireAdminAsync(request);
    
    if (!admin.isSuperAdmin) {
      return NextResponse.json({ error: 'Droits super administrateur requis' }, { status: 403 });
    }

    return admin;
  } catch (error) {
    console.error('Erreur d\'authentification:', error);
    return NextResponse.json({ error: 'Erreur d\'authentification' }, { status: 500 });
  }
}

// GET - R√©cup√©rer un utilisateur sp√©cifique
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const admin = await requireSuperAdminAuth(request);
    if (admin instanceof NextResponse) {
      return admin;
    }

    const user = await prisma.user.findUnique({
      where: { id },
      select: {
        id: true,
        username: true,
        email: true,
        isAdmin: true,
        createdAt: true,
        updatedAt: true,
        _count: {
          select: {
            articles: true,
            comments: true,
            contacts: true,
            payments: true,
          },
        },
        articles: {
          select: {
            id: true,
            title: true,
            slug: true,
            isPublished: true,
            createdAt: true,
          },
          orderBy: { createdAt: 'desc' },
          take: 5,
        },
        comments: {
          select: {
            id: true,
            content: true,
            createdAt: true,
            article: {
              select: {
                title: true,
                slug: true,
              },
            },
          },
          orderBy: { createdAt: 'desc' },
          take: 5,
        },
      },
    });

    if (!user) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    return NextResponse.json({ user });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}

// PUT - Mettre √† jour un utilisateur
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const admin = await requireSuperAdminAuth(request);
    if (admin instanceof NextResponse) {
      return admin;
    }

    const body = await request.json();
    const { username, email, isAdmin } = body;

    // Validation
    if (!username || !email) {
      return NextResponse.json(
        { error: 'Nom d\'utilisateur et email requis' },
        { status: 400 }
      );
    }

    // V√©rifier si l'utilisateur existe
    const existingUser = await prisma.user.findUnique({
      where: { id },
    });

    if (!existingUser) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // V√©rifier si le nom d'utilisateur ou l'email existe d√©j√†
    const duplicateUser = await prisma.user.findFirst({
      where: {
        OR: [
          { username },
          { email }
        ],
        NOT: {
          id
        }
      }
    });

    if (duplicateUser) {
      return NextResponse.json(
        { error: 'Un utilisateur avec ce nom d\'utilisateur ou cet email existe d√©j√†' },
        { status: 409 }
      );
    }

    // Mettre √† jour l'utilisateur
    const updatedUser = await prisma.user.update({
      where: { id },
      data: {
        username,
        email,
        isAdmin: isAdmin !== undefined ? isAdmin : existingUser.isAdmin,
      },
      select: {
        id: true,
        username: true,
        email: true,
        isAdmin: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    return NextResponse.json({ user: updatedUser });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de l\'utilisateur:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
}

// DELETE - Supprimer un utilisateur
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const admin = await requireSuperAdminAuth(request);
    if (admin instanceof NextResponse) {
      return admin;
    }

    // Emp√™cher la s   uppression de soi-m√™me
    if (admin.userId === id) {
      return NextResponse.json(
        { error: 'Vous ne pouvez pas supprimer votre propre compte' },
        { status: 400 }
      );
    }

    // V√©rifier si l'utilisateur existe
    const existingUser = await prisma.user.findUnique({
      where: { id },
      include: {
        _count: {
          select: {
            articles: true,
            comments: true,
            contacts: true,
            payments: true,
          },
        },
      },
    });

    if (!existingUser) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // Supprimer TOUTES les donn√©es de l'utilisateur en cascade
    console.log(`üóëÔ∏è [USER DELETE] Suppression de l'utilisateur ${id} avec toutes ses donn√©es...`);
    
    // 1. Supprimer les codes 2FA
    const deleted2FACodes = await prisma.twoFactorCode.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Codes 2FA supprim√©s: ${deleted2FACodes.count}`);

    // 3. Supprimer les tentatives de bruteforce (par IP de l'utilisateur)
    const deletedBruteforce = await prisma.bruteforceAttempt.deleteMany({
      where: { ip: existingUser.email } // Utiliser l'email comme identifiant
    });
    console.log(`   - Tentatives bruteforce supprim√©es: ${deletedBruteforce.count}`);

    // 4. Supprimer les analytics (PageViews, ArticleViews, UserSessions)
    const deletedPageViews = await prisma.pageView.deleteMany({
      where: { userId: id }
    });
    console.log(`   - PageViews supprim√©es: ${deletedPageViews.count}`);

    const deletedArticleViews = await prisma.articleView.deleteMany({
      where: { userId: id }
    });
    console.log(`   - ArticleViews supprim√©es: ${deletedArticleViews.count}`);

    const deletedUserSessions = await prisma.userSession.deleteMany({
      where: { userId: id }
    });
    console.log(`   - UserSessions supprim√©es: ${deletedUserSessions.count}`);

    // 5. Supprimer les notifications
    const deletedNotifications = await prisma.notification.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Notifications supprim√©es: ${deletedNotifications.count}`);

    // 6. Supprimer les commentaires
    const deletedComments = await prisma.comment.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Commentaires supprim√©s: ${deletedComments.count}`);

    // 7. Supprimer les contacts
    const deletedContacts = await prisma.contact.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Contacts supprim√©s: ${deletedContacts.count}`);

    // 8. Supprimer les abonnements aux cat√©gories
    const deletedCategorySubscriptions = await prisma.categorySubscription.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Abonnements aux cat√©gories supprim√©s: ${deletedCategorySubscriptions.count}`);

    // 9. Supprimer l'historique des achats AVANT les paiements
    const deletedPurchaseHistory = await prisma.purchaseHistory.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Historique des achats supprim√©: ${deletedPurchaseHistory.count}`);

    // 10. Maintenant supprimer les paiements (apr√®s avoir supprim√© PurchaseHistory)
    const deletedPayments = await prisma.payment.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Paiements supprim√©s: ${deletedPayments.count}`);

    // 11. Supprimer les articles cr√©√©s par l'utilisateur
    const deletedArticles = await prisma.article.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Articles supprim√©s: ${deletedArticles.count}`);

    // 12. Supprimer les √©valuations d'articles
    const deletedRatings = await prisma.rating.deleteMany({
      where: { userId: id }
    });
    console.log(`   - √âvaluations supprim√©es: ${deletedRatings.count}`);

    // 13. Supprimer les sessions 2FA
    const deleted2FASessions = await prisma.twoFactorSession.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Sessions 2FA supprim√©es: ${deleted2FASessions.count}`);

    // 14. Supprimer les factures et leurs √©l√©ments
    const deletedInvoices = await prisma.invoice.deleteMany({
      where: { userId: id }
    });
    console.log(`   - Factures supprim√©es: ${deletedInvoices.count}`);

    // 15. Enfin, supprimer l'utilisateur lui-m√™me
    await prisma.user.delete({
      where: { id },
    });

    console.log(`‚úÖ [USER DELETE] Utilisateur ${id} supprim√© avec succ√®s`);
    console.log(`üìä [USER DELETE] R√©sum√© des suppressions:`);
    console.log(`   - Articles: ${deletedArticles.count}`);
    console.log(`   - Commentaires: ${deletedComments.count}`);
    console.log(`   - Contacts: ${deletedContacts.count}`);
    console.log(`   - Paiements: ${deletedPayments.count}`);
    console.log(`   - Historique des achats: ${deletedPurchaseHistory.count}`);
    console.log(`   - Factures: ${deletedInvoices.count}`);
    console.log(`   - Analytics: ${deletedPageViews.count} + ${deletedArticleViews.count} + ${deletedUserSessions.count}`);
    console.log(`   - 2FA: ${deleted2FASessions.count} + ${deleted2FACodes.count}`);
    console.log(`   - Autres: ${deletedNotifications.count} + ${deletedRatings.count} + ${deletedCategorySubscriptions.count}`);

    return NextResponse.json({ message: 'Utilisateur supprim√© avec succ√®s' });
  } catch (error) {
    console.error('Erreur lors de la suppression de l\'utilisateur:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
} 