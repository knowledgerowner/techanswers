import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { requireAuth } from '@/lib/auth';
import bcrypt from 'bcryptjs';


// POST - Activer la 2FA
export async function POST(request: NextRequest) {
  try {
    const user = await requireAuth(request);
    if (user instanceof NextResponse) {
      return user;
    }

    const { currentPassword } = await request.json();

    if (!currentPassword) {
      return NextResponse.json(
        { error: 'Mot de passe requis' },
        { status: 400 }
      );
    }

    // R√©cup√©rer l'utilisateur avec le mot de passe hash√©
    const userWithPassword = await prisma.user.findUnique({
      where: { id: user.userId }
    });

    if (!userWithPassword) {
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      );
    }

    // V√©rifier le mot de passe
    const isPasswordValid = await bcrypt.compare(currentPassword, userWithPassword.password);
    if (!isPasswordValid) {
      return NextResponse.json(
        { error: 'Mot de passe incorrect' },
        { status: 401 }
      );
    }

    // V√©rifier si la 2FA est d√©j√† activ√©e
    if (userWithPassword.twoFactorEnabled) {
      return NextResponse.json(
        { error: 'La 2FA est d√©j√† activ√©e' },
        { status: 400 }
      );
    }

    // G√©n√©rer un secret 2FA
    const twoFactorSecret = require('crypto').randomBytes(32).toString('hex'); // eslint-disable-line @typescript-eslint/no-require-imports

    // Activer la 2FA
    await prisma.user.update({
      where: { id: user.userId },
      data: {
        twoFactorEnabled: true,
        twoFactorSecret
      }
    });

    // Envoyer le code de v√©rification par email
    try {
      console.log('üöÄ [2FA ENABLE] D√©but envoi code de v√©rification');
      
      // R√©cup√©rer les cookies de la requ√™te originale
      const cookies = request.headers.get('cookie');
      console.log('üç™ [2FA ENABLE] Cookies r√©cup√©r√©s:', cookies ? 'Oui' : 'Non');
      
      const codeResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/profile/security/2fa/send-code`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Cookie': cookies || ''
        },
        body: JSON.stringify({ type: 'SETUP' })
      });

      console.log('üì° [2FA ENABLE] R√©ponse API send-code:', {
        status: codeResponse.status,
        ok: codeResponse.ok
      });

      if (!codeResponse.ok) {
        const errorText = await codeResponse.text();
        console.log('‚ùå [2FA ENABLE] Erreur r√©ponse:', errorText);
        throw new Error('Erreur lors de l\'envoi du code de v√©rification');
      }

      const responseData = await codeResponse.json();
      console.log('‚úÖ [2FA ENABLE] Code envoy√© avec succ√®s:', responseData);
      
    } catch (codeError) {
      console.error('‚ùå [2FA ENABLE] Erreur lors de l\'envoi du code:', codeError);
      // Continuer m√™me si l'envoi du code √©choue
    }

    return NextResponse.json({
      message: '2FA activ√©e avec succ√®s. Un code de v√©rification a √©t√© envoy√© √† votre email.',
      requiresVerification: true
    });
  } catch (error) {
    console.error('Erreur lors de l\'activation de la 2FA:', error);
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    );
  }
} 